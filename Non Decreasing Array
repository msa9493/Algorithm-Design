Non-decreasing Array

Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.


class Solution:
    def checkPossibility(self, nums: List[int]) -> bool:
        trial = 2
        numtry = nums
        for i in range(len(numtry)-1):
            if (numtry[i] > numtry[i+1]):
                if i == 0:
                    numtry[i] = numtry[i+1]
                    trial -= 1
                elif (i > 0) and (trial == 2) and (numtry[i+1] < numtry[i-1]):
                    numtry[i+1] = numtry[i]
                    trial -= 1
                elif (i > 0) and (trial == 2) and (numtry[i+1] > numtry[i-1]):
                    numtry[i] = numtry[i+1]
                    trial -= 1
                elif (i>0) and (trial < 2):
                    return False
        if trial < 1:
            return False
        else:
            return True
